'''

The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

'''

from math import sqrt
from operator import mul
import time

def erat(limit):

    factors = [2] + range(3, limit, 2) #Creates the base of sieve.

    for j in range (3, int(sqrt(limit+1))): # Removes the multiples of all numbers up to limit.
        for q in factors:
            if q % j == 0 and q != j:
                factors.remove(q)

    return factors

def factors(n):
	global primes
	try:
		primes
	except NameError:
		primes = erat(100)
	factors = []
	for i in primes:
		while n % i == 0:
			n /= i
			factors.append(i)
	return factors

def numDivisors(n):
	facs = factors(n)
	occs = []
	# print facs
	for i in facs:
		occs.append(facs.count(i))
		facs = [j for j in facs if j != i]
	occs = map(lambda x:x+1, occs)
	return reduce(mul, occs)

def triangle(n):
	return (n * (n+1))/2

if __name__ == "__main__":
	global primes
	primes = erat(10000)
	time.clock()
	i = 10
	# i = 5
	# triNum = 10
	while True:
		triNum = triangle(i)
		numDiv = numDivisors(triNum)
		print triNum, numDiv
		if numDiv > 500:
			print triNum
			break
		triNum += i
		i += 1
		# i += 1
	print time.clock()


